[
    {
        "parameters":[
            "^a",
            "aboard"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "sha$",
            "sha"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a*",
            "aaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a[b,s,z]",
            "as"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a[bsz]",
            "as"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            ".*",
            "anything"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "colou?r",
            "color"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "[^abc]",
            "e"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\",
            "\\"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "[a-d[m-p]]",
            "a"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "[a-z&&[def]]",
            "d"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "[a-z&&[^bc]]",
            "a"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\d",
            "9"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\D",
            "b"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\s",
            " "
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\S",
            "s"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\w",
            "s"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\W",
            "\\n"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\Aavv",
            "avv"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a+",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a{2}",
            "aa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a{2,4}",
            "aaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a??",
            "vvv"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "a|b",
            "a"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)",
            "a"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "^[a-z0-9_-]{3,15}$",
            "username"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})",
            "password"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "#1f1f1F"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$",
            "email@gmail.com"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$",
            "192.168.1.2"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "<(\"[^\"]*\"|'[^']*'|[^'\">])*>",
            "<input>"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\s*(?i)href\\s*=\\s*(\"([^\"]*\")|'[^']*'|([^'\">\\s]+))",
            "<a href='\" + www.google.com + \"'>google</a>"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\u00E9",
            "Text with unicode accented character \u0065\u0301"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc){3}",
            "abcabcabc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\(abc\\){3}",
            "abcabcabc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?:abc){3}",
            "abcabcabc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\1",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\k<1>",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\k'1'",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\g1",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\g{1}",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\g<1>",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=\\g'1'",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(abc|def)=(?P=1)",
            "abc=abc"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)(b)(c)(d)\\k<-3>",
            "abcdb"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)(b)(c)(d)\\k'-3'",
            "abcdb"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)(b)(c)(d)\\g-3",
            "abcdb"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)(b)(c)(d)\\g{-3}",
            "abcdb"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)(b)(c)(d)\\g<-3>",
            "abcdb"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)(b)(c)(d)\\g'-3'",
            "abcdb"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a)?\\1",
            "aa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(a\\1?){3}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(\\2?(a)){3}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "foo(?>(co)*)co",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\Qfoo(?>(co)*)co\\E",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?:X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?idmsux-idmsux)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?idmsux-idmsux:X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?=X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?!X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?<=X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?<!X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?>X)",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{L}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{Ll}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{Lt}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{L&}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{Lm}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{Lo}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{Z}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{Zl}",
            "aaaaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "aaaa\\b",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "aaaa\\B",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\Aaaaa",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "aaa\\Gaaaa",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "aaa\\Zaaaa",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "aaa\\z",
            "aaaa"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?U)(?!\uDB80\uDC00)[\\W]",
            "功能 絶𣎴顯示廣告"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "t(?=s)",
            "streets"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "t(?!s)",
            "streets"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?<=s)t",
            "streets"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?<!s)t",
            "streets"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?<=is|e)t",
            "streets"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?<=s\\w{1,7})t",
            "streets"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?i)a",
            "a"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "te(?i)st",
            "test"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?i)te(?-i)st",
            "test"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?x)a#b",
            "a"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(?s).*",
            "ab\\n\\ndef"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "^(?<l>\\w)+\\w?(\\k<l>(?<-l>))+(?(l)(?!))$",
            ""
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\u00E0",
            "à"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "\\p{InArrows}",
            "U+2190"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            ".*?foo",
            "xfooxxxxxxfoo"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "x{3}?foo",
            "xfooxxxxxxfoo"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    },
    {
        "parameters":[
            "(qwe){3}?.*",
            "qweqweqwefoo"
        ],
        "stdOutExpectedResultRegex":".*matches.*",
        "stdErrExpectedResultRegex":""
    }
]